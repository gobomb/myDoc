{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	  "Switch": {
    "prefix": "sw",
    "body": [
      "switch $1 {",
      "  case $2:",
      "    $0",
      "  default:",
      "    // TODO: implement",
      "}",
    ]
  },
    "Context Argument": {
    "prefix": "con",
    "body": [
      "ctx context.Context"
    ]
  },
	  "Context Background": {
    "prefix": "cb",
    "body": [
      "context.Background()"
    ]
  },
 "Context WithTimeout": {
    "prefix": "ct",
    "body": [
      "ctx, cancel := context.WithTimeout(ctx, $0)",
      "defer cancel()"
    ]
  },

  "Context WithCancel": {
    "prefix": "cc",
    "body": [
      "ctx, cancel := context.WithCancel(ctx)",
      "defer cancel()"
    ]
  },

  "NewContext": {
    "prefix": "nc",
    "body": [
      "// ${1:name}Key is a private context key.",
      "type ${1:name}Key struct{}",
      "",
      "// New$3Context returns a new context with ${1:name}.",
      "func New$3Context(ctx context.Context, v *${2:Type}) context.Context {",
      "  return context.WithValue(ctx, ${1:name}Key{}, v)",
      "}",
      "",
      "// $3FromContext returns ${1:name} from context.",
      "func $3FromContext(ctx context.Context) (*${2:Type}, bool) {",
      "  v, ok := ctx.Value(${1:name}Key{}).(*${2:Type})",
      "  return v, ok",
      "}",
    ]
  },
    "Slice Remove": {
    "prefix": "sr",
    "body": [
      "${1:slice} = append(${1:slice}[:${2:index}], ${1:slice}[${2:index}+1:]...)"
    ]
  },

  "sort": {
    "prefix": "sort",
    "body": [
      "sort.Slice(${1:s}, func(i, j int) bool {",
      "  a := $1[i]",
      "  b := $1[j]",
      "  return $0",
      "})"
    ]
  },

  "int enum": {
    "prefix": "enum-int",
    "body": [
      "// $1 $2.",
      "type $1 int",
      "",
      "// $1s available.",
      "const (",
        "  $1$3 $1 = iota",
        "  $0",
      ")",
    ]
  },
  "defer func": {
    "prefix": "de",
    "body": [
      "defer func() {",
      "  $0",
      "}()"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:v}, ok := $2; ok {",
      "  $0",
      "}"
    ]
  },
  "Struct": {
    "prefix": "s",
    "body": [
      "// $1 $2.",
      "type $1 struct {",
      "  $0",
      "}"
    ]
  },

  "Struct Field": {
    "prefix": "sf",
    "body": [
      "// $1 $3.",
      "${1:Name} ${2:string}"
    ]
  },
  "For Range": {
    "prefix": "fr",
    "body": [
      "for _, ${1:v} := range ${2:value} {",
      "  $0",
      "}"
    ]
  },

  "For Range Chan": {
    "prefix": "frr",
    "body": [
      "for ${1:v} := range ${2:value} {",
      "  $0",
      "}"
    ]
  },
  "Config": {
    "prefix": "config",
    "body": [
      "// Config options.",
      "type Config struct {",
      "  $0",
      "}",
      "",
      "// $1 $2",
      "type $1 struct {",
      "  Config",
      "}",
      "",
      "// New $3 with the given config.",
      "func New(c Config) *$1 {",
      "  return &$1{",
      "    Config: c,",
      "  }",
      "}"
    ]
  },

  "Context-Canceled Channel Send": {
    "prefix": "cs",
    "body": [
      "select {",
      "case $1 <- $0:",
      "case <-ctx.Done():",
      " return ctx.Err()",
      "}",
    ]
  },

  "Non-blocking Channel Send": {
    "prefix": "nb",
    "body": [
      "select {",
      "case $1 <- $0:",
      "default:",
      "}",
    ]
  },

}
